package com.neu.pojo;
// Generated Apr 7, 2016 4:11:21 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.GenericGenerator;

import com.neu.business.Auditable;

/**
 * Address generated by hbm2java
 */
@Entity
@Table(name = "address", catalog = "webtools")
@org.hibernate.annotations.Entity(
		dynamicUpdate = true
)
public class Address implements java.io.Serializable,Auditable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 840662214843182480L;
	private long addressId;
	private String addressType;
	private String addressLine1;
	private String addressLine2;
	private String city;
	private String state;
	private Integer zipcode;
	private Long phoneNo;
	private Date creationTime;
	private Date modifiedTime;
	private Set<Person> personsForOfficeAddressId = new HashSet<Person>(0);
	private Set<Person> personsForHomeAddressId = new HashSet<Person>(0);

	public Address() {
	}

	public Address(long addressId) {
		this.addressId = addressId;
	}

	public Address(long addressId, String addressType, String addressLine1, String addressLine2, String city,
			String state, Integer zipcode, Long phoneNo, Set<Person> personsForOfficeAddressId, Set<Person> personsForHomeAddressId) {
		this.addressId = addressId;
		this.addressType = addressType;
		this.addressLine1 = addressLine1;
		this.addressLine2 = addressLine2;
		this.city = city;
		this.state = state;
		this.zipcode = zipcode;
		this.phoneNo = phoneNo;
		this.personsForOfficeAddressId = personsForOfficeAddressId;
		this.personsForHomeAddressId = personsForHomeAddressId;
	}

	@Id
	@GenericGenerator(name="id2",strategy="increment")
	@GeneratedValue(generator="id2")
	@Column(name = "AddressID", unique = true, nullable = false)
	public long getAddressId() {
		return this.addressId;
	}

	public void setAddressId(long addressId) {
		this.addressId = addressId;
	}

	@Column(name = "AddressType", length = 20)
	public String getAddressType() {
		return this.addressType;
	}

	public void setAddressType(String addressType) {
		this.addressType = addressType;
	}

	@Column(name = "AddressLine1", length = 150)
	public String getAddressLine1() {
		return this.addressLine1;
	}

	public void setAddressLine1(String addressLine1) {
		this.addressLine1 = addressLine1;
	}

	@Column(name = "AddressLine2", length = 150)
	public String getAddressLine2() {
		return this.addressLine2;
	}

	public void setAddressLine2(String addressLine2) {
		this.addressLine2 = addressLine2;
	}

	@Column(name = "City", length = 200)
	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	@Column(name = "State", length = 100)
	public String getState() {
		return this.state;
	}

	public void setState(String state) {
		this.state = state;
	}

	@Column(name = "Zipcode")
	public Integer getZipcode() {
		return this.zipcode;
	}

	public void setZipcode(Integer zipcode) {
		this.zipcode = zipcode;
	}

	@Column(name = "PhoneNo")
	public Long getPhoneNo() {
		return this.phoneNo;
	}

	public void setPhoneNo(Long phoneNo) {
		this.phoneNo = phoneNo;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creationTime", nullable = false, length = 19)
	public Date getCreationTime() {
		return this.creationTime;
	}

	public void setCreationTime(Date creationTime) {
		this.creationTime = creationTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modifiedTime", nullable = false, length = 19)
	public Date getModifiedTime() {
		return this.modifiedTime;
	}

	public void setModifiedTime(Date modifiedTime) {
		this.modifiedTime = modifiedTime;
	}


	@OneToMany(fetch = FetchType.LAZY, mappedBy = "addressByOfficeAddressId")
	public Set<Person> getPersonsForOfficeAddressId() {
		return this.personsForOfficeAddressId;
	}

	public void setPersonsForOfficeAddressId(Set<Person> personsForOfficeAddressId) {
		this.personsForOfficeAddressId = personsForOfficeAddressId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "addressByHomeAddressId")
	public Set<Person> getPersonsForHomeAddressId() {
		return this.personsForHomeAddressId;
	}

	public void setPersonsForHomeAddressId(Set<Person> personsForHomeAddressId) {
		this.personsForHomeAddressId = personsForHomeAddressId;
	}

}
