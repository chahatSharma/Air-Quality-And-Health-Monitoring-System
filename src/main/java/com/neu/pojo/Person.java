package com.neu.pojo;
// Generated Apr 7, 2016 4:11:21 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.Version;
import org.hibernate.annotations.Parameter;

import org.hibernate.annotations.GenericGenerator;

import com.neu.business.Auditable;

/**
 * Person generated by hbm2java
 */
@Entity
@Table(name = "person", catalog = "webtools")
@org.hibernate.annotations.Entity(
		dynamicUpdate = true
)
public class Person implements java.io.Serializable, Auditable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -3761541340630543633L;

	private long personId;
	private Address addressByOfficeAddressId;
	private Address addressByHomeAddressId;
	private String firstName;
	private String lastName;
	private Date dob;
	private String emailId;
	private Date creationTime;
	private Date modifiedTime;
	private Set<Workrequest> workrequestsForSenderId = new HashSet<Workrequest>(0);
	private Doctor doctor;
	private Mayor mayor;
	private Patient patient;
	private Publichealthofficer publichealthofficer;
	private Useraccount useraccount;
	private Set<Workrequest> workrequestsForReceiverId = new HashSet<Workrequest>(0);
	private String role;

	@Transient
	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Transient
	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	private String userName;
	private String password;

	public Person() {
	}

	public Person(long personId, Date creationTime, Date modifiedTime) {
		this.personId = personId;
		this.creationTime = creationTime;
		this.modifiedTime = modifiedTime;
	}

	public Person(long personId, Address addressByOfficeAddressId, Address addressByHomeAddressId, String firstName,
			String lastName, Date dob, String emailId, Date creationTime, Date modifiedTime,
			Set<Workrequest> workrequestsForSenderId, Doctor doctor, Mayor mayor, Patient patient,
			Publichealthofficer publichealthofficer, Useraccount useraccounts,
			Set<Workrequest> workrequestsForReceiverId) {
		this.personId = personId;
		this.addressByOfficeAddressId = addressByOfficeAddressId;
		this.addressByHomeAddressId = addressByHomeAddressId;
		this.firstName = firstName;
		this.lastName = lastName;
		this.dob = dob;
		this.emailId = emailId;
		this.creationTime = creationTime;
		this.modifiedTime = modifiedTime;
		this.workrequestsForSenderId = workrequestsForSenderId;
		this.doctor = doctor;
		this.mayor = mayor;
		this.patient = patient;
		this.publichealthofficer = publichealthofficer;
		this.useraccount = useraccounts;
		this.workrequestsForReceiverId = workrequestsForReceiverId;
	}

	public Person(String firstName, String lastName) {
		this.firstName = firstName;
		this.lastName = lastName;
	}

	@Id
	@GenericGenerator(name="id1",strategy="increment")
	@GeneratedValue(generator="id1")
	@Column(name = "PersonId", unique = true, nullable = false)
	public long getPersonId() {
		return this.personId;
	}

	public void setPersonId(long personId) {
		this.personId = personId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "OfficeAddressID")
	public Address getAddressByOfficeAddressId() {
		return this.addressByOfficeAddressId;
	}

	public void setAddressByOfficeAddressId(Address addressByOfficeAddressId) {
		this.addressByOfficeAddressId = addressByOfficeAddressId;
	}

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "HomeAddressID")
	public Address getAddressByHomeAddressId() {
		return this.addressByHomeAddressId;
	}

	public void setAddressByHomeAddressId(Address addressByHomeAddressId) {
		this.addressByHomeAddressId = addressByHomeAddressId;
	}

	@Column(name = "FirstName", length = 150)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "LastName", length = 150)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DOB", length = 10)
	public Date getDob() {
		return this.dob;
	}

	public void setDob(Date dob) {
		this.dob = dob;
	}

	@Column(name = "emailId", length = 100)
	public String getEmailId() {
		return this.emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creationTime", nullable = false, length = 19, updatable=false)
	public Date getCreationTime() {
		return this.creationTime;
	}

	public void setCreationTime(Date creationTime) {
		this.creationTime = creationTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modifiedTime", nullable = false, length = 19)
	@Version
	public Date getModifiedTime() {
		return this.modifiedTime;
	}

	public void setModifiedTime(Date modifiedTime) {
		this.modifiedTime = modifiedTime;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personBySenderId")
	public Set<Workrequest> getWorkrequestsForSenderId() {
		return this.workrequestsForSenderId;
	}

	public void setWorkrequestsForSenderId(Set<Workrequest> workrequestsForSenderId) {
		this.workrequestsForSenderId = workrequestsForSenderId;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "person")
	public Doctor getDoctor() {
		return this.doctor;
	}

	public void setDoctor(Doctor doctor) {
		this.doctor = doctor;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "person")
	public Mayor getMayor() {
		return this.mayor;
	}

	public void setMayor(Mayor mayor) {
		this.mayor = mayor;
	}

	@OneToOne(fetch = FetchType.EAGER, mappedBy = "person",cascade=CascadeType.ALL)
	public Patient getPatient() {
		return this.patient;
	}

	public void setPatient(Patient patient) {
		this.patient = patient;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "person")
	public Publichealthofficer getPublichealthofficer() {
		return this.publichealthofficer;
	}

	public void setPublichealthofficer(Publichealthofficer publichealthofficer) {
		this.publichealthofficer = publichealthofficer;
	}

	
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByReceiverId")
	public Set<Workrequest> getWorkrequestsForReceiverId() {
		return this.workrequestsForReceiverId;
	}
	@OneToOne(mappedBy="person", cascade=CascadeType.ALL) 
	public Useraccount getUseraccount() {
		return useraccount;
	}

	public void setUseraccount(Useraccount useraccount) {
		this.useraccount = useraccount;
	}

	public void setWorkrequestsForReceiverId(Set<Workrequest> workrequestsForReceiverId) {
		this.workrequestsForReceiverId = workrequestsForReceiverId;
	}
	@Transient
	public String getRole() {
		return role;
	}

	public void setRole(String role) {
		this.role = role;
	}

}
